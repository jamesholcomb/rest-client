{"version":3,"sources":["webpack:///webpack/bootstrap bc3765e9eba7b9ded666","webpack:///./src/index.js","webpack:///./src/session.js","webpack:///./src/rest-client.js","webpack:///./~/es6-rest-client/dist/client.es6.js","webpack:///./src/auth.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bc3765e9eba7b9ded666\n **/","import Session from './session'\r\n\r\nconst server = 'http://192.168.0.128:52855/'\r\n\r\nvar session = new Session(server + 'token', server + 'api')\r\n\r\nsession.login('abroker', 'abc123')\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import RestClient from './rest-client'\r\nimport AuthClient from './auth'\r\n\r\nexport default class Session {\r\n    constructor(authBaseUri, apiBaseUri) {\r\n        this.authClient = new AuthClient(authBaseUri) \r\n        this.restClient = new RestClient(apiBaseUri)\r\n    }\r\n\r\n    login(user, pass) {\r\n        this.authClient.authenticate(user, pass)\r\n        \r\n        this.restClient.api.account.profile()\r\n            .then(function (stream) {\r\n                const user = stream.json()\r\n                window.sessionStorage.setItem('user', JSON.stringify(user))\r\n            })\r\n    }\r\n    \r\n    logout() {\r\n        this.restClient.account.signout.delete()\r\n\r\n        delete window.sessionStorage.accessToken;\r\n        delete window.sessionStorage.user;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/session.js\n **/","import es6RestClient from '../node_modules/es6-rest-client/dist/client.es6.js'\r\n\r\nclass RestClient {\r\n    constructor(baseUri) {\r\n        es6RestClient.settings({\r\n            baseURI: baseUri,\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Authorization': 'Bearer ' + window.sessionStorage.accessToken\r\n            },\r\n        })\r\n        \r\n        this.api = es6RestClient\r\n    }\r\n}\r\n\r\nexport default RestClient\n\n\n/** WEBPACK FOOTER **\n ** ./src/rest-client.js\n **/","/**\n * es6-rest-client - v2.0.1 - Sun, 13 Dec 2015 17:57:16 GMT\n * https://github.com/humana-fragilitas/ES6-Rest-Client.git\n * Copyright (c) 2015 Andrea Blasio (https://github.com/humana-fragilitas); Licensed MIT\n */\n/**\r\n * Given an object, serializes its own key/value pairs into\r\n * querystring; values can be either primitive types or\r\n * function expressions\r\n *\r\n * @param {Object} obj Object to be serialized into querystring\r\n * @return {String}\r\n */\r\n\r\nfunction objectToQueryString(obj){\r\n\r\n    return Object.keys(obj || {})\r\n                 .filter((key) => { return ((obj[key] !== '') &&\r\n                                            (obj[key] !== null)); })\r\n                 .map((key) => {\r\n                    \r\n                     const value = (typeof obj[key] === 'function') ?\r\n                                      encodeURIComponent(obj[key]()) :\r\n                                         encodeURIComponent(obj[key]);\r\n                    \r\n                     return `${key}=${value}`;\r\n\r\n                 })\r\n                 .join('&');\r\n\r\n}\r\n\r\n/**\r\n * Returns a string identifier composed by a prefix\r\n * followed by current timestamp\r\n *\r\n * @return {String}\r\n */\r\n \r\nfunction prefixedTimestamp(){\r\n    \r\n    const PREFIX = '__es6-rest-client__';\r\n    const TIMESTAMP = (new Date()).getTime();\r\n    \r\n    return `${PREFIX}${TIMESTAMP}`;\r\n    \r\n}\r\n\r\n/**\r\n * Allows to concatenate an existing URL with a querystring fragment\r\n *\r\n * @param {String} url URL to be concatenated with the given querystring\r\n * @return {String} queryString Querystring fragment to be appended\r\n *                              to the specified URL\r\n * @return {String}\r\n */\r\n\r\nfunction appendQueryStringToURL(url, queryString){\r\n    \r\n    const mark = (queryString) ? (((url || '').indexOf('?') === -1) ? '?' : '&') : '';\r\n    \r\n    return `${url}${mark}${queryString}`;\r\n    \r\n}\n\nlet defaultSettings;\nlet userDefinedSettings;\nlet properties;\nlet querystring;\nlet fetchConfiguration;\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\nconst QUERYSTRING_PARAMETERS = Symbol();\r\nconst BODY_PAYLOAD = Symbol();\r\n\r\n/**\r\n * Stores client default configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\ndefaultSettings = {\r\n    \r\n    method: 'get', \r\n    baseURI: '/',\r\n    params: {},\r\n    jsonp: { callback: prefixedTimestamp }\r\n\r\n};\r\n\r\n/**\r\n * Stores user defined client configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\nuserDefinedSettings = {};\r\n\r\n/**\r\n * Stores properties and methods names invoked on the\r\n * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n *\r\n * @type Array\r\n */\r\n\r\nproperties = [];\r\n\r\n/**\r\n * Stores key/value pairs meant to be\r\n * serialized into querystring\r\n *\r\n * @type Object\r\n */\r\n\r\nquerystring = {};\r\n\r\n/**\r\n * GlobalFetch.fetch method initialization object\r\n * (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n *\r\n * @type Object\r\n */\r\n\r\nfetchConfiguration = {};\r\n\r\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n\r\n /**\r\n  * Helps to configure the client by creating an initialization object suitable\r\n  * as an argument for the GlobalFetch.fetch method; will conveniently be turned into\r\n  * an higher-order function via ES7 decorator in the next releases\r\n  *  \r\n  * @method _httpMethod\r\n  * @param {Symbol} type Determines whether any contents should be sent\r\n                         as either querystring parameters or body payload\r\n  * @param {String} httpVerb HTTP method to be specified in the GlobalFetch.fetch\r\n  *                          initialization object (reference: ~/src/client.es6.js)\r\n  * @param {Blob|\r\n  *         BufferSource|\r\n  *         FormData|\r\n  *         URLSearchParams|\r\n  *         USVString} value Value to be either serialized to querystring or\r\n  *                          specified as body payload in the GlobalFetch.fetch\r\n  *                          initialization object, depending on the\r\n  *                          chosen HTTP method (reference: ~/src/client.es6.js)\r\n  *                                                                      \r\n  * @private\r\n  */\r\n\r\nconst _httpMethod = function _httpMethod(type, httpVerb, value){\r\n    \r\n    switch (type) {\r\n        \r\n        case QUERYSTRING_PARAMETERS:\r\n             fetchConfiguration = Object.assign({ method: httpVerb }, fetchConfiguration);\r\n             Object.assign(querystring, value);\r\n             break;\r\n            \r\n        case BODY_PAYLOAD:        \r\n             fetchConfiguration = Object.assign({ method: httpVerb },\r\n                                                (value) ? { body: value } : null);\r\n             break;\r\n        \r\n    }\r\n    \r\n};\r\n\r\n/************************************/\r\n/* class                            */\r\n/************************************/\r\n\r\n/**\r\n * Provides logic to store and parse configuration options, properties\r\n * and methods names invoked on the proxied RestClient class\r\n * (reference: ~/src/proxy.es6.js)\r\n *\r\n * @class Configuration\r\n * @constructor\r\n */\r\n\r\nclass Configuration {\r\n    \r\n    /************************************/\r\n    /* public methods                   */\r\n    /************************************/\r\n    \r\n    /**\r\n     * Gets an array of properties and methods names invoked on the\r\n     * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n\r\n    get properties(){\r\n\r\n        return properties;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Gets an array of values resulting from the parsing of currently\r\n     * stored client settings suitable as an argument to the RestClient class\r\n     * fetch() method (reference: ~/src/client.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n\r\n    get computed(){\r\n\r\n        let settings,\r\n            configuration,\r\n            params,\r\n            route,\r\n            jsonPCallback;\r\n\r\n        settings = Object.assign({}, defaultSettings, userDefinedSettings);\r\n        configuration = Object.assign({ method: settings.method }, fetchConfiguration);\r\n        params = objectToQueryString(Object.assign({}, querystring, settings.params));\r\n        route = appendQueryStringToURL((settings.baseURI + properties.join('/')),\r\n                                        params);\r\n        jsonPCallback = settings.jsonp;\r\n        \r\n        this.reset();\r\n\r\n        return [route, configuration, jsonPCallback];\r\n \r\n    }\r\n    \r\n    /**\r\n     * Allows to override client defaults with user defined settings,\r\n     * persisting them across subsequent calls, unless explicitly\r\n     * either modified or reset\r\n     *  \r\n     * @method settings\r\n     * @param {Object} obj An object containing key/value pairs meant\r\n     *                     to override client default settings\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    settings(obj){\r\n         \r\n        Object.assign(userDefinedSettings, obj);\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Allows to specify a per-call initialization object suitable \r\n     * for the underlying call to the GlobalFetch.fetch method\r\n     * (reference: ~/src/client.es6.js)\r\n     *  \r\n     * @method init\r\n     * @param {Object} obj GlobalFetch.fetch initialization object\r\n     *                     (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    init(obj){\r\n    \r\n        fetchConfiguration = obj;\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Restores client settings (routes, querystring parameters,\r\n     * GlobalFetch.fetch initialization object, user defined settings)\r\n\t * to their defaults\r\n     * \r\n     * @method reset\r\n     * @param {Boolean} [settings] Optionally allows to also clear any user defined\r\n     *                             settings specified via settings() method\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    reset(settings){\r\n\r\n        properties.length = 0; \r\n        querystring = {};\r\n        fetchConfiguration = {};\r\n        \r\n        if (settings) {\r\n            \r\n            userDefinedSettings = Object.assign({}, defaultSettings);\r\n            \r\n        }\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP GET\r\n     * \r\n     * @method get\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    get(obj){\r\n        \r\n        _httpMethod(QUERYSTRING_PARAMETERS, 'get', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP HEAD\r\n     * \r\n     * @method head\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n     \r\n    head(obj){\r\n\r\n        _httpMethod(QUERYSTRING_PARAMETERS, 'head', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via JSONP technique\r\n     * \r\n     * @method jsonp\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n     \r\n    jsonp(obj){\r\n\r\n        _httpMethod(QUERYSTRING_PARAMETERS, 'jsonp', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP POST\r\n     * \r\n     * @method post\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    post(payload){\r\n\r\n        _httpMethod(BODY_PAYLOAD, 'post', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PUT\r\n     * \r\n     * @method put\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    put(payload){\r\n\r\n        _httpMethod(BODY_PAYLOAD, 'put', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP DELETE\r\n     * \r\n     * @method delete\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    delete(payload){\r\n\r\n        _httpMethod(BODY_PAYLOAD, 'delete', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PATCH\r\n     * \r\n     * @method patch\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n\r\n    patch(payload){\r\n\r\n        _httpMethod(BODY_PAYLOAD, 'patch', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Configures the client to fetch a resource via HTTP OPTIONS\r\n     * \r\n     * @method options\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n     \r\n    options(payload){\r\n\r\n        _httpMethod(BODY_PAYLOAD, 'options', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\n\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n         \r\n/**\r\n * Fetches a remote JSON-encoded file via JSONP technique\r\n *  \r\n * @method _jsonpFetch\r\n * @for RestClient\r\n * @param {String} url A string containing the URL to which the request is sent\r\n * @param {Object} callback An object whose first key/value pair respectively contains\r\n *                          names of the JSONP callback querystring parameter and of its\r\n *                          related function meant to accept the JSON-encoded data as\r\n *                          an argument\r\n * @private\r\n * @return {Promise<any>}\r\n */\r\n         \r\nconst _jsonpFetch = function _jsonpFetch(url, callback){\r\n    \r\n    let callbackParamName,\r\n        callbackFunctionName,  \r\n        querystring,\r\n        scriptId,\r\n        scriptElement,\r\n        scriptSource;\r\n\r\n    callbackParamName = Object.keys(callback)[0];\r\n    callbackFunctionName = callback[callbackParamName];\r\n    querystring = objectToQueryString(callback);\r\n    scriptId = prefixedTimestamp();\r\n    scriptSource = appendQueryStringToURL(url, querystring);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        scriptElement = document.createElement('script');\r\n        scriptElement.src = scriptSource;\r\n        scriptElement.id = scriptId;\r\n        scriptElement.addEventListener('error', reject);\r\n\r\n        window[callbackFunctionName] = function(data){\r\n\r\n            Reflect.deleteProperty(window[callbackFunctionName]);\r\n            scriptElement.parentNode.removeChild(scriptElement);\r\n            resolve(data);\r\n\r\n        };\r\n\r\n        (document.getElementsByTagName('head')[0] ||\r\n                document.body || document.documentElement).appendChild(scriptElement);\r\n\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Proxy target object (reference: ~/src/proxy.es6.js);\r\n * provides logic to fetch remote resources\r\n *  \r\n * @class RestClient\r\n * @static\r\n */\r\n\r\nclass RestClient {\r\n\r\n    /**\r\n     * Wraps the native GlobalFetch.fetch method providing\r\n     * additional support for cross-domain fetching of\r\n     * JSON-encoded resources via JSONP technique\r\n     *  \r\n     * @method fetch\r\n     * @param {String} url A string containing the URL to which the request is sent\r\n     * @param {Object} initObj GlobalFetch.fetch initialization object\r\n     *                         (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @param {Object} callback An object whose first key/value pair respectively contains\r\n     *                          names of the JSONP callback querystring parameter and of its\r\n     *                          related function meant to accept the JSON-encoded data as\r\n     *                          an argument\r\n     * @return {Promise<Response>|Promise<any>}\r\n     * @static\r\n     */\r\n    \r\n    static fetch(url, initObj, callback){\r\n\r\n        if (initObj.method === 'jsonp') {\r\n\r\n            return _jsonpFetch(url, callback);\r\n\r\n        }\r\n\r\n        return fetch(url, initObj);\r\n\r\n    }\r\n\r\n}\n\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\nconst configuration = new Configuration();\r\n\r\n/************************************/\r\n/* helper functions                 */\r\n/************************************/\r\n\r\n/**\r\n * Processes any method invokation on the proxied RestClient class by\r\n * checking whether the former exists in the definition of the latter: if positive,\r\n * configures the client with any provided arguments and forwards the call\r\n * to the original method implementation; if negative, stores the non-existing\r\n * method name as route fragment in the configuration and performs a default\r\n * get() method call on the target RestClient class interface.\r\n *\r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {Object} thisArg The 'this' argument for the call\r\n * @param {Array} argumentsList Array of arguments passed to the trapped method call\r\n * @return {RestClient|Promise<Response>|Promise<any>} \r\n */\r\n\r\nconst _trapMethod = function _trapMethod(target, thisArg, argumentsList){\r\n    \r\n    const DEFAULT_HTTP_VERB = 'get';\r\n    \r\n    let properties,\r\n        propertiesLength,\r\n        currentProperty,\r\n        isMethodName,\r\n        isHTTPVerb,\r\n        hasDefaultHTTPVerb;\r\n\r\n    properties = configuration.properties;\r\n    propertiesLength = properties.length;\r\n    currentProperty = properties[propertiesLength-1];\r\n    isMethodName = (typeof configuration[currentProperty] === 'function');\r\n    isHTTPVerb = isMethodName && Reflect.apply(configuration[properties.pop()],\r\n                                               configuration,\r\n                                               argumentsList);\r\n    hasDefaultHTTPVerb = !isMethodName &&\r\n                         !isHTTPVerb &&\r\n                          Reflect.apply(configuration[DEFAULT_HTTP_VERB],\r\n                                        configuration,\r\n                                        argumentsList);\r\n        \r\n    return (isHTTPVerb || hasDefaultHTTPVerb) ?\r\n        Reflect.apply(target.fetch, target, configuration.computed) :\r\n            restClientProxy;\r\n                    \r\n};\r\n\r\n/**\r\n * Processes any getter invokation on the proxied RestClient class\r\n * by storing properties keys as route fragments in the configuration object\r\n *  \r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {String} propKey The trapped property key\r\n * @param {Proxy} receiver The Proxy object applied to the RestClient class\r\n * @return {RestClient} \r\n */\r\n\r\nconst _trapProperty = function _trapProperty(target, propKey, receiver){\r\n\r\n    configuration.properties.push(propKey);\r\n\r\n    return receiver;\r\n\r\n}\r\n\r\n/************************************/\r\n/* library entry point              */\r\n/************************************/\r\n\r\n/**\r\n * Wraps the RestClient static class with a Proxy object\r\n * in order to trap and subsequently process any properties\r\n * and methods invoked on the former\r\n */\r\n\r\nconst restClientProxy = new Proxy(RestClient,\r\n{\r\n\r\n    get(target, propKey, receiver) {\r\n\r\n        return _trapProperty(target, propKey, receiver);\r\n\r\n    },\r\n\r\n    apply(target, thisArg, argumentsList) {\r\n\r\n        return _trapMethod(target, thisArg, argumentsList);\r\n\r\n    }\r\n\r\n});\n\nexport default restClientProxy;\n//# sourceMappingURL=client.es6.js.map\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/es6-rest-client/dist/client.es6.js\n **/","import authClient from '../node_modules/es6-rest-client/dist/client.es6.js'\r\n\r\nexport default class AuthService {\r\n    constructor(baseUri) {\r\n        this.baseUri = baseUri\r\n    }\r\n\r\n    authenticate(username, password) {\r\n        authClient.settings({\r\n            baseURI: this.baseUri,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        })\r\n\r\n        const request = {\r\n            username: username,\r\n            password: password,\r\n            grant_type: 'password'\r\n        }\r\n\r\n        authClient.token.post(request)\r\n            .then(function (result) {\r\n                window.sessionStorage.accessToken = result.access_token\r\n            })\r\n            .catch(function (error) {\r\n\r\n            })\r\n    }\r\n\r\n    isAuthenticated() {\r\n        const user = JSON.parse(window.sessionStorage.access_token) || null\r\n\r\n        return !!user\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/auth.js\n **/"],"sourceRoot":""}